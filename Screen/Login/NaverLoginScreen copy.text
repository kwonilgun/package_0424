/* eslint-disable react/jsx-no-undef */
/*
 * File: Membership.Screen.tsx
 * Project: market_2024_12_13
 * File Created: Thursday, 19th December 2024 7:34:29 am
 * Author: Kwonilgun(권일근) (kwonilgun@naver.com)
 * -----
 * Last Modified: Thursday, 19th December 2024 8:03:43 am
 * Modified By: Kwonilgun(권일근) (kwonilgun@naver.com>)
 * -----
 * Copyright <<projectCreationYear>> - 2024 루트원 AI, 루트원 AI
 * 2024-12-19 : 코드 생성
 */

/* eslint-disable @typescript-eslint/no-shadow */
/* eslint-disable react-native/no-inline-styles */
/* eslint-disable react/no-unstable-nested-components */
import React, { ReactElement, useEffect, useState } from 'react';
import {
  Button,
  KeyboardAvoidingView,
  Platform, ScrollView, StyleSheet, Text, TouchableOpacity,
  View
} from 'react-native';


import { NaverLoginScreenProps } from '../model/types/TUserNavigator';
import FontAwesome from 'react-native-vector-icons/FontAwesome';

import WrapperContainer from '../../utils/basicForm/WrapperContainer';
import HeaderComponent from '../../utils/basicForm/HeaderComponents';
import colors from '../../styles/colors';
import { RFPercentage } from 'react-native-responsive-fontsize';
import AsyncStorage from '@react-native-async-storage/async-storage';
import GlobalStyles from '../../styles/GlobalStyles';
import { GoogleSignin } from '@react-native-google-signin/google-signin';
import axios, { AxiosResponse } from 'axios';
import { baseURL } from '../../assets/common/BaseUrl';
import { decode } from 'base-64';


import { appleAuth, AppleButton, AppleCredentialState } from '@invertase/react-native-apple-authentication';
import { jwtDecode } from 'jwt-decode';

// polyfill for "atob" so that jwt.decode will work
global.atob = decode;

/**
 * You'd technically persist this somewhere for later use.
 */
let userId = 'unknown';
let userName = 'unknown';
let userEmail = 'unknown';

/**
 * Fetches the credential state for the current user, if any, and updates state on completion.
 */
async function fetchAndUpdateCredentialState(updateCredentialStateForUser: any) {
  if (userId === 'unknown') {
    updateCredentialStateForUser('User not signed in.');
  } else {
    const credentialState = await appleAuth.getCredentialStateForUser(userId);
    if (credentialState === appleAuth.State.AUTHORIZED) {
      updateCredentialStateForUser('AUTHORIZED');
    } else {
      updateCredentialStateForUser(credentialState);
    }
  }
}

async function onUpdateCredentialStateButtonPress(updateCredentialStateForUser: any) {
  console.warn('Beginning Credential Update');
  fetchAndUpdateCredentialState(updateCredentialStateForUser).catch(error =>
    updateCredentialStateForUser(`Error: ${error.code}`),
  );
}

/**
 * Starts the Sign In flow.
 */
async function onAppleButtonPress(updateCredentialStateForUser: any) {
  console.warn('Beginning Apple Authentication');

  // start a login request
  try {
    const appleAuthRequestResponse = await appleAuth.performRequest({
      requestedOperation: appleAuth.Operation.LOGIN,
      requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME],
    });

    console.log('appleAuthRequestResponse', appleAuthRequestResponse);

    const {
      user: newUser,
      email,
      fullName,
      identityToken,
      nonce,
      realUserStatus /* etc */,
    } = appleAuthRequestResponse;

    userId = newUser;
    email ? (userEmail = email) : (userEmail = 'unknown');
    fullName && fullName.givenName && fullName.familyName
      ? (userName = `${fullName.givenName} ${fullName.familyName}`)
      : (userName = 'unknown');

    // The email and fullName are only provided on the first sign in to an app.
    // But, we can get the email from the JWT every time if we decode it.
    const decoded = jwtDecode(identityToken!);
    console.log('decoded token: ', decoded);
    // userEmail === 'unknown' && decoded.email
    //   ? (userEmail = decoded.email)
    //   : (userEmail = 'unknown');

    fetchAndUpdateCredentialState(updateCredentialStateForUser).catch(error =>
      updateCredentialStateForUser(`Error: ${error.code}`),
    );

    if (identityToken) {
      // e.g. sign in with Firebase Auth using `nonce` & `identityToken`
      console.log(nonce, identityToken);
    } else {
      // no token - failed sign-in?
    }

    if (realUserStatus === appleAuth.UserStatus.LIKELY_REAL) {
      console.log("I'm a real person!");
    }

    console.warn(`Apple Authentication Completed, ${userId}, ${email}`);
  } catch (error: any) {
    if (error?.code === appleAuth.Error.CANCELED) {
      console.warn('User canceled Apple Sign in.');
    } else {
      console.error(error);
    }
  }
}


const Gap = (): ReactElement => <View style={{ marginTop: 24 }} />;

const NaverLoginScreen: React.FC<NaverLoginScreenProps> = props => {

  const [credentialStateForUser, updateCredentialStateForUser] = useState<string | null >(null);

  useEffect(() => {
    console.log('NaverLogin - useEffect');
    // GoogleSignin.configure({
    //   webClientId: '60338696147-ba7sethhai2vluk5np1gmluta1eliuoo.apps.googleusercontent.com',
    //   // iosClientId: GOOGLE_IOS_CLIENT_ID,
    //   scopes: ['profile', 'email'],
    // });

    if (!appleAuth.isSupported) {
      console.log('애플 auth 지원하지 않음');
      return;
    }

    fetchAndUpdateCredentialState(updateCredentialStateForUser).catch(error =>
      updateCredentialStateForUser(`Error: ${error.code}`),
    );

    return () => {
      console.log('NaverLoginScreen - return');
    };
  }, []);


  if (!appleAuth.isSupported) {
    return (
      <View style={[styles.container, styles.horizontal]}>
        <Text>Apple Authentication is not supported on this device.</Text>
      </View>
    );
  }

  const login = async (): Promise<void> => {
    console.log('Google Login');


    try {
      await GoogleSignin.hasPlayServices();
      const userInfo = await GoogleSignin.signIn();
      const tokenId = userInfo.data?.idToken;
      const token = {token: tokenId};
      console.log('token = ', token);

      const response: AxiosResponse = await axios.post(
        `${baseURL}users/google`,
        JSON.stringify(token),
        {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
        },
      );

      console.log('Google Login Success:', response.data);
    } catch (error) {
      console.error('Google Login Failed:', error);
    }

  };

  const logout = async (): Promise<void> => {
    try {
      await GoogleSignin.signOut();
      // Perform additional cleanup and logout operations.
      console.log('google sign out 성공');
    } catch (error) {
      console.log('Google Sign-Out Error: ', error);
    }
  };

  // const getProfile = async (): Promise<void> => {
  // };

  const backToLogin = async (props: any) => {
    console.log('Membership.screen.tsx: backTo Login 함수 실행 \n');

    const value = await AsyncStorage.getItem('language');
    if (value === 'kr') {
      console.log('Membership.screen language=', value);
    } else {
      // changeLanguage('en');
      console.log('Membership.screen language=', value);
    }

    props.navigation.navigate('LoginScreen');
  };

  const LeftCustomComponent = () => {
    return (
      <TouchableOpacity onPress={() => backToLogin(props)}>
        <>
          {/* <Text style={styles.leftTextStyle}>홈</Text> */}
          <FontAwesome
            style={{
              height: RFPercentage(8),
              width: RFPercentage(10),
              marginTop: RFPercentage(2),
              color: colors.black,
              fontSize: RFPercentage(5),
              fontWeight: 'bold',
              // transform: [{scaleX: 1.5}], // 폭을 1.5배 넓힘
            }}
            name="arrow-left"
          />
        </>
      </TouchableOpacity>
    );
  };



  return (
    <WrapperContainer containerStyle={{paddingHorizontal: 0}}>
      <HeaderComponent
        rightPressActive={false}
        isLeftView={true}
        leftCustomView={LeftCustomComponent}
        centerText= '구글 로그인'
        containerStyle={{paddingHorizontal: 8}}
        isRight={false}
        // rightText={'       '}
        // rightTextStyle={{color: colors.lightBlue}}
        // onPressRight={() => {}}
      />
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={GlobalStyles.containerKey}>
       <ScrollView
        style={{ flex: 1 }}
        contentContainerStyle={{ flexGrow: 1, padding: 24 }}
      >
        {/* <Button title={'Login'} onPress={login} />
        <Gap />
        <Button title={'Logout'} onPress={logout} />
        <Gap /> */}

      <View style={[styles.container, styles.horizontal]}>
          <Text
            style={styles.header}
            onPress={() => onUpdateCredentialStateButtonPress(updateCredentialStateForUser)}
          >
            Credential State
          </Text>
          <Text>{credentialStateForUser}</Text>

          <Text
            style={styles.header}
            onPress={() => onUpdateCredentialStateButtonPress(updateCredentialStateForUser)}
          >
            User Information
          </Text>
          <Text>{`id: ${userId} / email: ${userEmail} / name: ${userName}`}</Text>

          <Text style={styles.header}>Buttons</Text>
          <Text>Continue Styles</Text>
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.WHITE}
            buttonType={AppleButton.Type.CONTINUE}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.WHITE_OUTLINE}
            buttonType={AppleButton.Type.CONTINUE}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.BLACK}
            buttonType={AppleButton.Type.CONTINUE}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
          <Text>Sign-in Styles</Text>
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.WHITE}
            buttonType={AppleButton.Type.SIGN_IN}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.WHITE_OUTLINE}
            buttonType={AppleButton.Type.SIGN_IN}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
          <AppleButton
            style={styles.appleButton}
            cornerRadius={5}
            buttonStyle={AppleButton.Style.BLACK}
            buttonType={AppleButton.Type.SIGN_IN}
            onPress={() => onAppleButtonPress(updateCredentialStateForUser)}
          />
      </View>


      </ScrollView>
      </KeyboardAvoidingView>
    </WrapperContainer>
  );
};

const styles = StyleSheet.create({
  appleButton: {
    width: 200,
    height: 60,
    margin: 10,
  },
  header: {
    margin: 10,
    marginTop: 30,
    fontSize: 18,
    fontWeight: '600',
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'pink',
  },
  horizontal: {
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 10,
  },

  inputTitle: {
    fontWeight: 'bold',
    fontSize: RFPercentage(2.0),
    marginTop: RFPercentage(1),
    color: 'black',
    // borderColor: 'black',
    // borderWidth: 2,
  },
  errorMessage: {
    color: 'red',
    margin: RFPercentage(1),
    fontSize: RFPercentage(2.6),
    fontWeight: 'bold',
  },
});

export default NaverLoginScreen;
